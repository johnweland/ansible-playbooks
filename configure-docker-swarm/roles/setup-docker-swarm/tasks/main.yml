---
- name: Initalize Docker Swarm on Primary manager
  community.docker.docker_swarm:
    state: present
  register: swarm_result
  delegate_to: "{{ hostvars[groups['managers'][0]]['ansible_hostname'] }}"
  run_once: true

- name: Save Join Tokens
  ansible.builtin.set_fact:
    manger_token: "{{ swarm_result.swarm_facts_JoinTokens.Manager }}"
    worker_token: "{{ swarm_result.swarm_facts_JoinTokens.Worker }}"
    cacheable: true

# - name: Add Managers to Docker Swarm
#   community.docker.docker_swarm:
#     state: join
#     remote_addrs:
#       - "{{ hostvars[groups['managers'][0]]['ansible_eth0']['ipv4']['address'] }}"
#     join_token: "{{ hostvars[groups['managers'][0]]['manager_token'] }}"
#     with_items: "{{ groups['managers'] }}"
#     when: hostvars[item].ansible_hostname != hostvars[groups['managers'][0]]['ansible_hostname']

# - name: Add Workers to Docker Swarm
#   community.docker.docker_swarm:
#     state: join
#     remote_addrs:
#       - "{{ hostvars[groups['managers'][0]]['ansible_eth0']['ipv4']['address'] }}"
#     join_token: "{{ hostvars[groups['managers'][0]]['worker_token'] }}"
#     with_items: "{{ groups['workers'] }}"

# - name: Label Docker Swarm all_nodes
#   community.docker.docker_node:
#     hostname: "{{ hostvars[item].ansible_hostname }}"
#     lables:
#       size: "{{ hostvars[item].size }}"
#     with_items: "{{ groups['all'] }}"
#     run_once: true
